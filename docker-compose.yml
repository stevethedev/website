services:
  nginx:
    container_name: nginx
    build:
      context: "."
      dockerfile_inline: |
        FROM nginx:alpine-slim
        RUN rm -rf /usr/share/nginx/html/*
        COPY ./nginx/nginx.conf /etc/nginx/nginx.conf
    restart: always
    develop:
      watch:
        - action: sync+restart
          path: nginx/nginx.conf
          target: /etc/nginx/nginx.conf
    ports:
      - "80:80"

  admin-web:
    container_name: admin-web
    build:
      context: "."
      dockerfile_inline: |
        FROM node:22-alpine AS schema-build
        WORKDIR /build
        COPY . .
        RUN npm install --global quicktype && node ./scripts/schema.mjs

        FROM node:22-alpine AS js-build
        WORKDIR /build
        COPY --from=schema-build /build/web .
        RUN npm ci && npm run build

        FROM nginx:alpine
        RUN rm -rf /usr/share/nginx/html/*
        COPY --from=js-build /build/dist/admin /usr/share/nginx/html
        COPY ./nginx/web.nginx.conf /etc/nginx/nginx.conf
    develop:
      watch:
        - action: rebuild
          path: web/scripts
          target: /build/web/scripts
        - action: rebuild
          path: web/src
          target: /build/web/src
        - action: rebuild
          path: web/resource
          target: /build/web/resource
        - action: rebuild
          path: web/package.json
          target: /build/web/package.json

  reader-web:
    container_name: reader-web
    build:
      context: "."
      dockerfile_inline: |
        FROM node:22-alpine AS schema-build
        WORKDIR /build
        COPY . .
        RUN npm install --global quicktype && node ./scripts/schema.mjs

        FROM node:22-alpine AS js-build
        WORKDIR /build
        COPY --from=schema-build /build/web .
        RUN npm ci && npm run build

        FROM nginx:alpine
        RUN rm -rf /usr/share/nginx/html/*
        COPY --from=js-build /build/dist/reader /usr/share/nginx/html
        COPY ./nginx/web.nginx.conf /etc/nginx/nginx.conf
    develop:
      watch:
        - action: rebuild
          path: web/scripts
          target: /build/web/scripts
        - action: rebuild
          path: web/src
          target: /build/web/src
        - action: rebuild
          path: web/resource
          target: /build/web/resource
        - action: rebuild
          path: web/package.json
          target: /build/web/package.json

  reader-api:
    container_name: reader-api
    build:
      context: "."
      dockerfile_inline: |
        FROM node:22-alpine AS schema-build
        WORKDIR /build
        COPY . .
        RUN npm install --global quicktype && node ./scripts/schema.mjs

        FROM rust:1 AS rust-build
        WORKDIR /app
        COPY --from=schema-build /build/api .
        RUN cargo build --bin reader

        FROM rust:1
        WORKDIR /user/rust/app
        COPY --from=rust-build /app/target/debug/reader .
        CMD ["./reader"]
    develop:
      watch:
        - action: rebuild
          path: api/src
          target: /app/src
        - action: rebuild
          path: api/Cargo.toml
          target: /app/Cargo.toml

  admin-api:
    container_name: admin-api
    build:
      context: "."
      dockerfile_inline: |
        FROM node:22-alpine AS schema-build
        WORKDIR /build
        COPY . .
        RUN npm install --global quicktype && node ./scripts/schema.mjs

        FROM rust:1 AS rust-build
        WORKDIR /app
        COPY --from=schema-build /build/api .
        RUN cargo build --bin admin

        FROM rust:1
        WORKDIR /user/rust/app
        COPY --from=rust-build /app/target/debug/admin .
        CMD ["./admin"]
    develop:
      watch:
        - action: rebuild
          path: api/src
          target: /app/src
        - action: rebuild
          path: api/Cargo.toml
          target: /app/Cargo.toml
    expose:
      - "8000"
